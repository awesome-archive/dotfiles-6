priority 1

snippet inc "include head"
#include <${1:iostream}>${0}
endsnippet

snippet foff "turn off the clang format"
// clang-format off
${VISUAL}
// clang-format on
endsnippet

snippet cl "class .. (class)"
class ${1:`!p
basename =  snip.basename or "name"

tokens = basename.split('_')
tokens = [token.title() for token in tokens]

snip.rv = "".join(tokens)
`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});

private:
	${0:/* data */}
};
endsnippet

snippet qcl "class .. (QWidget class)"
#include <${1:QWidget}>

class ${2:`!p
basename =  snip.basename or "name"

tokens = basename.split('_')
tokens = [token.title() for token in tokens]

snip.rv = "".join(tokens)
`} : public $1 {
	Q_OBJECT

public:
	explicit ${2/(\w+).*/$1/}(${3:arguments, }QWidget *parent = nullptr);

private:
	${0:/* data */}
};
endsnippet

snippet try "try ... catch"
try {
	${0:${VISUAL}}
} catch (${1:std::exception& exc}) {
	${2:// TODO}
}
endsnippet

snippet ns "namespace"
namespace ${1}{


}  // namespace $1
endsnippet

snippet todo "add to do task"
// TODO(Zhang Fan) ${1}
endsnippet

snippet fora "for each loop (fora)"
for (auto ${2:&i} : ${1:container}) {
	${VISUAL}$0
}
endsnippet
